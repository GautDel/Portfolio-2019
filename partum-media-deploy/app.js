let chevron = document.querySelector(".chevron"), quote = document.querySelector(".quote"), about = document.querySelector(".mobile-menu-about-me"), contact = document.querySelector(".mobile-menu-contact"), social = document.querySelector(".mobile-menu-social"), whatIDo = document.querySelector(".mobile-menu-what-i-do"), portfolio = document.querySelector(".mobile-menu-portfolio"), testimonial = document.querySelector(".mobile-menu-testimonial"), buttonCont = document.querySelector(".cloud-buttons-container"), contactLink = document.querySelector(".contact-link"), desc = document.querySelector(".description"), aboutD = document.querySelector(".about-me"), whatIDoD = document.querySelector(".what-i-do"), contactD = document.querySelector(".contact"), portfolioD = document.querySelector(".portfolio"), testimonialD = document.querySelector(".testimonial"), socialD = document.querySelector(".social"), aboutCont = document.querySelector(".about-cont"), contactCont = document.querySelector(".contact-cont"), portfolioCont = document.querySelector(".portfolio-cont"), testimonialCont = document.querySelector(".testimonial-cont"), whatIDoCont = document.querySelector(".what-i-do-cont"), socialCont = document.querySelector(".social-cont"), deskLink = document.querySelector(".desktop-contact-link"), resetImg = document.createElement("img"), resetEl = document.createElement("div"), leftChevron = document.querySelectorAll(".left-chevron"); resetEl.classList.add("reset"), resetImg.src = "./assets/partum-media-x.png", resetEl.appendChild(resetImg); const app = () => { scrollUp(), quoteScroll(), about.addEventListener("click", () => { scrollDownHandler(about, contact, social, whatIDo, portfolio, testimonial) }), contact.addEventListener("click", () => { scrollDownHandler(contact, about, social, whatIDo, portfolio, testimonial) }), social.addEventListener("click", () => { scrollDownHandler(social, contact, about, whatIDo, portfolio, testimonial) }), whatIDo.addEventListener("click", () => { scrollDownHandler(whatIDo, contact, social, about, portfolio, testimonial), desc.classList.add("show") }), portfolio.addEventListener("click", () => { scrollDownHandler(portfolio, contact, social, whatIDo, about, testimonial) }), testimonial.addEventListener("click", () => { scrollDownHandler(testimonial, portfolio, contact, social, whatIDo, about) }), resetEl.addEventListener("click", t => { t.stopPropagation(), resetHandler(about, contact, portfolio, whatIDo, testimonial, social, t) }), aboutD.addEventListener("click", () => { contentHandler(aboutCont) }), whatIDoD.addEventListener("click", () => { contentHandler(whatIDoCont) }), portfolioD.addEventListener("click", () => { contentHandler(portfolioCont) }), testimonialD.addEventListener("click", () => { console.log("clic"), contentHandler(testimonialCont) }), socialD.addEventListener("click", () => { contentHandler(socialCont) }), contactD.addEventListener("click", () => { contentHandler(contactCont) }), contactLink.addEventListener("click", t => { t.stopPropagation(), contact.classList.remove("slideDown"), contact.classList.add("slide-contact"), resetButton(contact) }), deskLink.addEventListener("click", () => { aboutCont.classList.remove("contentAnim"), aboutCont.classList.add("contentReset"), contactCont.classList.add("contentAnim"), setTimeout(() => { aboutCont.classList.remove("contentReset") }, 1500) }) }, contentHandler = t => { t.classList.add("contentAnim"), t.classList.remove("contentReset"), buttonCont.classList.add("hide"), leftChevron.forEach(e => { e.addEventListener("click", () => { e.parentElement.classList.contains("contentAnim") && (e.parentElement.classList.remove("contentAnim"), e.parentElement.classList.add("contentReset")), buttonCont.classList.remove("hide"), buttonCont.classList.add("show"), setTimeout(() => { buttonCont.classList.remove("show"), t.classList.remove("contentReset") }, 1500) }) }) }, scrollUp = () => { let t = [about, contact, portfolio, whatIDo, social, testimonial]; chevron.addEventListener("click", () => { about.classList.add("slideUp1"), contact.classList.add("slideUp2"), portfolio.classList.add("slideUp3"), whatIDo.classList.add("slideUp4"), testimonial.classList.add("slideUp5"), social.classList.add("slideUp6"), setTimeout(() => { about.classList.remove("slideUp1"), contact.classList.remove("slideUp2"), portfolio.classList.remove("slideUp3"), whatIDo.classList.remove("slideUp4"), testimonial.classList.remove("slideUp5"), social.classList.remove("slideUp6") }, 4e3), t.forEach(t => { t.classList.remove("slideDown"), t.classList.remove("slideUp1"), t.classList.remove("slideTop") }) }) }, quoteScroll = () => { quote.addEventListener("click", t => { t.stopPropagation(), scrollDownHandler(contact, about, social, whatIDo, portfolio, testimonial) }) }, scrollDownHandler = (t, e, o, s, c, n) => { let l = [e, o, s, c, n], a = [...t.classList]; t.classList.remove(a[1]), t.classList.add("slideTop"), l.forEach(t => { t.classList.add("slideDown") }), resetButton(t) }, resetHandler = (t, e, o, s, c, n) => { let l = [t, e, o, s, c, n], a = [...t.classList], i = [...e.classList], r = [...o.classList], d = [...s.classList], m = [...c.classList], u = [...n.classList]; t.classList.add("slideReset1"), setTimeout(() => { t.classList.remove("slideReset1") }, 1e3), e.classList.add("slideReset2"), setTimeout(() => { e.classList.remove("slideReset2") }, 1e3), o.classList.add("slideReset3"), setTimeout(() => { o.classList.remove("slideReset3") }, 1e3), s.classList.add("slideReset4"), setTimeout(() => { s.classList.remove("slideReset4") }, 1e3), c.classList.add("slideReset5"), setTimeout(() => { c.classList.remove("slideReset5") }, 1e3), n.classList.add("slideReset6"), setTimeout(() => { n.classList.remove("slideReset6") }, 1e3), l.forEach(t => { t.classList.remove(t[1]) }), t.classList.remove(a[1]), e.classList.remove(i[1]), o.classList.remove(r[1]), s.classList.remove(d[1]), c.classList.remove(m[1]), n.classList.remove(u[1]), setTimeout(() => { l.forEach(t => { t.classList.remove("slideUp1") }) }, 1500), l.forEach(t => { t.childNodes.length >= 4 && "DIV" == t.lastChild.nodeName && t.removeChild(t.lastChild) }), desc.classList.contains("show") && desc.classList.remove("show") }, resetButton = t => { t.appendChild(resetEl), setTimeout(() => { resetEl.classList.add("slideButtonUp") }, 1e3) }; scrollUp(), quoteScroll(), about.addEventListener("click", () => { scrollDownHandler(about, contact, social, whatIDo, portfolio, testimonial) }), contact.addEventListener("click", () => { scrollDownHandler(contact, about, social, whatIDo, portfolio, testimonial) }), social.addEventListener("click", () => { scrollDownHandler(social, contact, about, whatIDo, portfolio, testimonial) }), whatIDo.addEventListener("click", () => { scrollDownHandler(whatIDo, contact, social, about, portfolio, testimonial), desc.classList.add("show") }), portfolio.addEventListener("click", () => { scrollDownHandler(portfolio, contact, social, whatIDo, about, testimonial) }), testimonial.addEventListener("click", () => { scrollDownHandler(testimonial, portfolio, contact, social, whatIDo, about) }), resetEl.addEventListener("click", t => { t.stopPropagation(), resetHandler(about, contact, portfolio, whatIDo, testimonial, social, t) }), aboutD.addEventListener("click", () => { contentHandler(aboutCont) }), whatIDoD.addEventListener("click", () => { contentHandler(whatIDoCont) }), portfolioD.addEventListener("click", () => { contentHandler(portfolioCont) }), testimonialD.addEventListener("click", () => { console.log("clic"), contentHandler(testimonialCont) }), socialD.addEventListener("click", () => { contentHandler(socialCont) }), contactD.addEventListener("click", () => { contentHandler(contactCont) }), contactLink.addEventListener("click", t => { t.stopPropagation(), contact.classList.remove("slideDown"), contact.classList.add("slide-contact"), resetButton(contact) }), deskLink.addEventListener("click", () => { aboutCont.classList.remove("contentAnim"), aboutCont.classList.add("contentReset"), contactCont.classList.add("contentAnim"), setTimeout(() => { aboutCont.classList.remove("contentReset") }, 1500) });